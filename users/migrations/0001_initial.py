# Generated by Django 5.2.4 on 2025-07-31 13:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('order_status', 'Statut de commande'), ('promotion', 'Promotion'), ('loyalty', 'Fidélité'), ('newsletter', 'Newsletter'), ('system', 'Système')], max_length=20, verbose_name='Type de notification')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('is_sent', models.BooleanField(default=False, verbose_name='Envoyé')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Connexion'), ('product_view', 'Vue produit'), ('add_to_cart', 'Ajout au panier'), ('purchase', 'Achat'), ('review', 'Avis'), ('wishlist_add', 'Ajout liste de souhaits'), ('coupon_used', 'Utilisation coupon')], max_length=20, verbose_name="Type d'activité")),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Activité utilisateur',
                'verbose_name_plural': 'Activités utilisateurs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notifications SMS')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Notifications push')),
                ('preferred_shipping_method', models.CharField(choices=[('standard', 'Livraison standard'), ('express', 'Livraison express'), ('pickup', 'Point relais')], default='standard', max_length=20, verbose_name='Méthode de livraison préférée')),
                ('save_payment_info', models.BooleanField(default=False, verbose_name='Sauvegarder les informations de paiement')),
                ('default_ice_cream_size', models.CharField(choices=[('small', 'Petite'), ('medium', 'Moyenne'), ('large', 'Grande')], default='medium', max_length=20, verbose_name='Taille de glace par défaut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Préférence utilisateur',
                'verbose_name_plural': 'Préférences utilisateur',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Homme'), ('F', 'Femme'), ('O', 'Autre')], max_length=10, verbose_name='Genre')),
                ('newsletter_subscription', models.BooleanField(default=True, verbose_name='Abonnement newsletter')),
                ('loyalty_points', models.PositiveIntegerField(default=0, verbose_name='Points de fidélité')),
                ('loyalty_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='bronze', max_length=20, verbose_name='Niveau de fidélité')),
                ('total_orders', models.PositiveIntegerField(default=0, verbose_name='Total des commandes')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Total dépensé')),
                ('last_order_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière commande')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dietary_restrictions', models.ManyToManyField(blank=True, to='products.allergen', verbose_name='Restrictions alimentaires')),
                ('favorite_flavors', models.ManyToManyField(blank=True, to='products.flavor', verbose_name='Parfums préférés')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='ReferralProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_code', models.CharField(max_length=20, unique=True, verbose_name='Code de parrainage')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('reward_claimed', models.BooleanField(default=False, verbose_name='Récompense réclamée')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('referred', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_received', to=settings.AUTH_USER_MODEL, verbose_name='Filleul')),
                ('referrer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_sent', to=settings.AUTH_USER_MODEL, verbose_name='Parrain')),
            ],
            options={
                'verbose_name': 'Parrainage',
                'verbose_name_plural': 'Parrainages',
                'unique_together': {('referrer', 'referred')},
            },
        ),
    ]
