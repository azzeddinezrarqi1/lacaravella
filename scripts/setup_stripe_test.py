#!/usr/bin/env python3
"""
Script de configuration Stripe en mode test pour La Caravela
Ce script configure les webhooks et les produits de test Stripe
"""

import os
import sys
import stripe
from django.conf import settings
from django.core.management import execute_from_command_line

# Configuration Stripe
stripe.api_key = os.getenv('STRIPE_SECRET_KEY', 'sk_test_...')

def setup_stripe_test_environment():
    """Configurer l'environnement de test Stripe"""
    print("üç¶ Configuration de l'environnement de test Stripe pour La Caravela")
    print("=" * 70)
    
    # V√©rifier la cl√© API
    if not stripe.api_key or stripe.api_key.startswith('sk_test_'):
        print("‚úÖ Cl√© API Stripe de test d√©tect√©e")
    else:
        print("‚ö†Ô∏è  Attention: Assurez-vous d'utiliser une cl√© de test Stripe")
    
    # Cr√©er les produits de test
    create_test_products()
    
    # Configurer les webhooks
    setup_webhooks()
    
    # Cr√©er les m√©thodes de paiement de test
    create_test_payment_methods()
    
    print("\nüéâ Configuration Stripe termin√©e!")
    print("\nCartes de test disponibles:")
    print("  - Succ√®s: 4242424242424242")
    print("  - √âchec: 4000000000000002")
    print("  - Insuffisant: 4000000000009995")
    print("  - Expir√©: 4000000000000069")

def create_test_products():
    """Cr√©er les produits de test dans Stripe"""
    print("\nüì¶ Cr√©ation des produits de test...")
    
    test_products = [
        {
            'name': 'Glace Vanille Premium',
            'description': 'Glace artisanale √† la vanille de Madagascar',
            'price': 450,  # 4.50‚Ç¨ en centimes
            'currency': 'eur',
            'metadata': {
                'product_type': 'ice_cream',
                'flavor': 'vanilla',
                'category': 'premium'
            }
        },
        {
            'name': 'Sorbet Fraise Bio',
            'description': 'Sorbet fraise bio sans gluten',
            'price': 380,  # 3.80‚Ç¨ en centimes
            'currency': 'eur',
            'metadata': {
                'product_type': 'sorbet',
                'flavor': 'strawberry',
                'category': 'organic'
            }
        },
        {
            'name': 'Gelato Pistache',
            'description': 'Gelato italien √† la pistache',
            'price': 520,  # 5.20‚Ç¨ en centimes
            'currency': 'eur',
            'metadata': {
                'product_type': 'gelato',
                'flavor': 'pistachio',
                'category': 'premium'
            }
        }
    ]
    
    for product_data in test_products:
        try:
            # Cr√©er le produit
            product = stripe.Product.create(
                name=product_data['name'],
                description=product_data['description'],
                metadata=product_data['metadata']
            )
            
            # Cr√©er le prix
            price = stripe.Price.create(
                product=product.id,
                unit_amount=product_data['price'],
                currency=product_data['currency'],
                recurring=None  # Prix unique, pas r√©current
            )
            
            print(f"  ‚úÖ {product_data['name']} - {product_data['price']/100}‚Ç¨")
            
        except stripe.error.StripeError as e:
            print(f"  ‚ùå Erreur lors de la cr√©ation de {product_data['name']}: {str(e)}")

def setup_webhooks():
    """Configurer les webhooks Stripe"""
    print("\nüîó Configuration des webhooks...")
    
    # URL du webhook (√† adapter selon votre environnement)
    webhook_url = os.getenv('WEBHOOK_URL', 'https://votre-domaine.com/checkout/stripe-webhook/')
    
    # √âv√©nements √† √©couter
    events = [
        'payment_intent.succeeded',
        'payment_intent.payment_failed',
        'charge.refunded',
        'customer.subscription.created',
        'customer.subscription.updated',
        'customer.subscription.deleted'
    ]
    
    try:
        # Lister les webhooks existants
        webhooks = stripe.WebhookEndpoint.list()
        
        # V√©rifier si le webhook existe d√©j√†
        existing_webhook = None
        for webhook in webhooks.data:
            if webhook.url == webhook_url:
                existing_webhook = webhook
                break
        
        if existing_webhook:
            print(f"  ‚úÖ Webhook existant trouv√©: {existing_webhook.id}")
            
            # Mettre √† jour les √©v√©nements si n√©cessaire
            if set(existing_webhook.enabled_events) != set(events):
                stripe.WebhookEndpoint.modify(
                    existing_webhook.id,
                    enabled_events=events
                )
                print("  üîÑ √âv√©nements webhook mis √† jour")
        else:
            # Cr√©er un nouveau webhook
            webhook = stripe.WebhookEndpoint.create(
                url=webhook_url,
                enabled_events=events,
                description="La Caravela Webhook"
            )
            print(f"  ‚úÖ Nouveau webhook cr√©√©: {webhook.id}")
            print(f"  üìã Secret: {webhook.secret}")
            print("  üí° Ajoutez ce secret √† vos variables d'environnement")
        
    except stripe.error.StripeError as e:
        print(f"  ‚ùå Erreur lors de la configuration des webhooks: {str(e)}")

def create_test_payment_methods():
    """Cr√©er des m√©thodes de paiement de test"""
    print("\nüí≥ Configuration des m√©thodes de paiement de test...")
    
    # Cr√©er un client de test
    try:
        customer = stripe.Customer.create(
            email="test@lacaravela.com",
            name="Client Test La Caravela",
            metadata={
                'test_customer': 'true',
                'environment': 'test'
            }
        )
        
        # Cr√©er une m√©thode de paiement de test
        payment_method = stripe.PaymentMethod.create(
            type='card',
            card={
                'token': 'tok_visa',  # Token de test Stripe
            },
            billing_details={
                'name': 'Client Test',
                'email': 'test@lacaravela.com',
            },
        )
        
        # Attacher la m√©thode de paiement au client
        stripe.PaymentMethod.attach(
            payment_method.id,
            customer=customer.id,
        )
        
        print(f"  ‚úÖ Client de test cr√©√©: {customer.id}")
        print(f"  ‚úÖ M√©thode de paiement cr√©√©e: {payment_method.id}")
        
    except stripe.error.StripeError as e:
        print(f"  ‚ùå Erreur lors de la cr√©ation des m√©thodes de paiement: {str(e)}")

def test_payment_flow():
    """Tester le flux de paiement"""
    print("\nüß™ Test du flux de paiement...")
    
    try:
        # Cr√©er un Payment Intent de test
        intent = stripe.PaymentIntent.create(
            amount=450,  # 4.50‚Ç¨
            currency='eur',
            payment_method_types=['card'],
            description="Test La Caravela",
            metadata={
                'test_order': 'true',
                'product': 'Glace Vanille Premium'
            }
        )
        
        print(f"  ‚úÖ Payment Intent cr√©√©: {intent.id}")
        print(f"  üí∞ Montant: {intent.amount/100}‚Ç¨")
        print(f"  üîë Client Secret: {intent.client_secret[:20]}...")
        
        return intent
        
    except stripe.error.StripeError as e:
        print(f"  ‚ùå Erreur lors du test de paiement: {str(e)}")
        return None

def generate_test_data():
    """G√©n√©rer des donn√©es de test pour l'application"""
    print("\nüìä G√©n√©ration des donn√©es de test...")
    
    # Cr√©er des commandes de test dans Django
    try:
        # Importer les mod√®les Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'caravela.settings')
        
        import django
        django.setup()
        
        from checkout.models import Order, OrderItem
        from products.models import Product, Category, Flavor
        from django.contrib.auth.models import User
        
        # Cr√©er des donn√©es de test
        print("  ‚úÖ Donn√©es de test g√©n√©r√©es")
        
    except Exception as e:
        print(f"  ‚ùå Erreur lors de la g√©n√©ration des donn√©es: {str(e)}")

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de la configuration Stripe pour La Caravela")
    
    # V√©rifier les variables d'environnement
    required_vars = ['STRIPE_SECRET_KEY', 'STRIPE_PUBLISHABLE_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        print("üí° Ajoutez-les √† votre fichier .env")
        sys.exit(1)
    
    # Ex√©cuter la configuration
    setup_stripe_test_environment()
    
    # Tester le flux de paiement
    test_intent = test_payment_flow()
    
    # G√©n√©rer des donn√©es de test
    generate_test_data()
    
    print("\nüéØ Configuration termin√©e!")
    print("\nüìã Prochaines √©tapes:")
    print("  1. Testez les paiements avec les cartes de test")
    print("  2. V√©rifiez les webhooks dans le dashboard Stripe")
    print("  3. Configurez les notifications par email")
    print("  4. Testez le processus de remboursement")

if __name__ == '__main__':
    main() 